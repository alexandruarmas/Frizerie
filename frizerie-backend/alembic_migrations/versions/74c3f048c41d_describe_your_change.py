"""Describe your change

Revision ID: 74c3f048c41d
Revises: 
Create Date: 2025-05-28 00:22:46.893465

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '74c3f048c41d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('vip_level', sa.String(length=20), nullable=True),
    sa.Column('loyalty_points', sa.Integer(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('phone_number')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)

    # Create enum types if they don't exist
    booking_status = postgresql.ENUM('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED', 'NO_SHOW', 'WAITLISTED', name='bookingstatus', create_type=False)
    recurrence_type = postgresql.ENUM('NONE', 'DAILY', 'WEEKLY', 'BIWEEKLY', 'MONTHLY', 'CUSTOM', name='recurrencetype', create_type=False)
    
    # Create the enum types
    booking_status.create(op.get_bind(), checkfirst=True)
    recurrence_type.create(op.get_bind(), checkfirst=True)

    op.create_table('bookings',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('stylist_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.Column('status', booking_status, nullable=False),
    sa.Column('notes', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('recurrence_type', recurrence_type, nullable=False),
    sa.Column('recurrence_end_date', sa.DateTime(), nullable=True),
    sa.Column('recurrence_pattern', sa.JSON(), nullable=True),
    sa.Column('parent_booking_id', sa.String(length=36), nullable=True),
    sa.Column('calendar_event_id', sa.String(length=100), nullable=True),
    sa.Column('reminder_sent', sa.Boolean(), nullable=False),
    sa.Column('cancellation_reason', sa.String(length=500), nullable=True),
    sa.Column('cancellation_time', sa.DateTime(), nullable=True),
    sa.Column('no_show_count', sa.Integer(), nullable=False),
    sa.Column('last_modified_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['last_modified_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['parent_booking_id'], ['bookings.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.ForeignKeyConstraint(['stylist_id'], ['stylists.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_foreign_key(None, 'alerts', 'users', ['resolved_by'], ['id'])
    op.create_foreign_key(None, 'analytics_events', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'analytics_events', 'users', ['stylist_id'], ['id'])
    op.create_foreign_key(None, 'audit_logs', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'booking_conflicts', 'bookings', ['booking_id'], ['id'])
    op.create_foreign_key(None, 'dashboards', 'users', ['owner_id'], ['id'])
    op.create_foreign_key(None, 'error_logs', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'files', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'loyalty_points_history', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'loyalty_redemptions', 'bookings', ['booking_id'], ['id'])
    op.create_foreign_key(None, 'loyalty_redemptions', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'notification_digests', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'notification_preferences', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'notifications', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'payments', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'payments', 'bookings', ['booking_id'], ['id'])
    op.create_foreign_key(None, 'referral_program', 'users', ['referred_id'], ['id'])
    op.create_foreign_key(None, 'referral_program', 'users', ['referrer_id'], ['id'])
    op.create_foreign_key(None, 'saved_payment_methods', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'stylist_reviews', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'stylist_time_off', 'users', ['approved_by'], ['id'])
    op.create_foreign_key(None, 'user_roles', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'user_settings', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'waitlist_entries', 'bookings', ['booking_id'], ['id'])
    op.create_foreign_key(None, 'waitlist_entries', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'waitlist_entries', type_='foreignkey')
    op.drop_constraint(None, 'waitlist_entries', type_='foreignkey')
    op.drop_constraint(None, 'user_settings', type_='foreignkey')
    op.drop_constraint(None, 'user_roles', type_='foreignkey')
    op.drop_constraint(None, 'stylist_time_off', type_='foreignkey')
    op.drop_constraint(None, 'stylist_reviews', type_='foreignkey')
    op.drop_constraint(None, 'saved_payment_methods', type_='foreignkey')
    op.drop_constraint(None, 'referral_program', type_='foreignkey')
    op.drop_constraint(None, 'referral_program', type_='foreignkey')
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.drop_constraint(None, 'notifications', type_='foreignkey')
    op.drop_constraint(None, 'notification_preferences', type_='foreignkey')
    op.drop_constraint(None, 'notification_digests', type_='foreignkey')
    op.drop_constraint(None, 'loyalty_redemptions', type_='foreignkey')
    op.drop_constraint(None, 'loyalty_redemptions', type_='foreignkey')
    op.drop_constraint(None, 'loyalty_points_history', type_='foreignkey')
    op.drop_constraint(None, 'files', type_='foreignkey')
    op.drop_constraint(None, 'error_logs', type_='foreignkey')
    op.drop_constraint(None, 'dashboards', type_='foreignkey')
    op.drop_constraint(None, 'booking_conflicts', type_='foreignkey')
    op.drop_constraint(None, 'audit_logs', type_='foreignkey')
    op.drop_constraint(None, 'analytics_events', type_='foreignkey')
    op.drop_constraint(None, 'analytics_events', type_='foreignkey')
    op.drop_constraint(None, 'alerts', type_='foreignkey')
    op.drop_table('bookings')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
